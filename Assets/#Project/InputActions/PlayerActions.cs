//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/#Project/InputActions/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""mainP1"",
            ""id"": ""7a11d207-106d-4ccd-ad10-cde21c5c6474"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""e16ba597-1504-4cd0-9df0-c5cfdc294f29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ad534c09-bfdd-4f1e-8c24-f343981c7d88"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""5582523b-4663-4f7f-a8d5-4f02eaa35e05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""17269264-93ed-4fcf-893d-d7aa72af5099"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""64f42c4c-73be-4ed9-8a75-c9f5034aac39"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2a2a1e16-b5b6-432a-be3c-e472ff7e1fd5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""975620b3-fde4-4824-b9ab-42dd1bc5f3ff"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""58e38077-4b28-4091-9e27-7fd229776a49"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fdf0435d-e16d-4c84-8994-bc6dce3e4dcb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b3bc789d-34b7-4a0e-88d3-95db1f462771"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2e7c9921-f222-4443-98d2-d7294845a814"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a5b1857-77c8-49d1-a401-80c8122e81b0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""mainP2"",
            ""id"": ""e33eca61-e398-4e71-b7ad-080badb4d31a"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""4df27756-d931-4b74-9f9a-293ab4cc682d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""38364e87-04f9-419f-a88f-c4aacc1e1b85"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c433224d-5ca0-4704-9a37-eb98ec408f0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c9cabe3e-8162-4023-9614-9ad9b55bd706"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""P2Join"",
                    ""type"": ""Button"",
                    ""id"": ""fb102580-df8a-4dd3-80af-f7b28539d658"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1c70564e-a542-409b-961e-42caf3eb1724"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc79420a-6a02-4649-aba9-8da0d1dcd555"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""193a5d9f-c34c-48d4-839b-76aa1daf8733"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad763d12-a514-417c-b0fd-5a9fe8d23660"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc9208e6-61f0-4a64-8c26-257139767e8f"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""P2Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard+Mouse"",
            ""bindingGroup"": ""Keyboard+Mouse"",
            ""devices"": []
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": []
        }
    ]
}");
        // mainP1
        m_mainP1 = asset.FindActionMap("mainP1", throwIfNotFound: true);
        m_mainP1_Shoot = m_mainP1.FindAction("Shoot", throwIfNotFound: true);
        m_mainP1_Move = m_mainP1.FindAction("Move", throwIfNotFound: true);
        m_mainP1_Jump = m_mainP1.FindAction("Jump", throwIfNotFound: true);
        m_mainP1_Look = m_mainP1.FindAction("Look", throwIfNotFound: true);
        // mainP2
        m_mainP2 = asset.FindActionMap("mainP2", throwIfNotFound: true);
        m_mainP2_Shoot = m_mainP2.FindAction("Shoot", throwIfNotFound: true);
        m_mainP2_Move = m_mainP2.FindAction("Move", throwIfNotFound: true);
        m_mainP2_Jump = m_mainP2.FindAction("Jump", throwIfNotFound: true);
        m_mainP2_Look = m_mainP2.FindAction("Look", throwIfNotFound: true);
        m_mainP2_P2Join = m_mainP2.FindAction("P2Join", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // mainP1
    private readonly InputActionMap m_mainP1;
    private List<IMainP1Actions> m_MainP1ActionsCallbackInterfaces = new List<IMainP1Actions>();
    private readonly InputAction m_mainP1_Shoot;
    private readonly InputAction m_mainP1_Move;
    private readonly InputAction m_mainP1_Jump;
    private readonly InputAction m_mainP1_Look;
    public struct MainP1Actions
    {
        private @PlayerActions m_Wrapper;
        public MainP1Actions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_mainP1_Shoot;
        public InputAction @Move => m_Wrapper.m_mainP1_Move;
        public InputAction @Jump => m_Wrapper.m_mainP1_Jump;
        public InputAction @Look => m_Wrapper.m_mainP1_Look;
        public InputActionMap Get() { return m_Wrapper.m_mainP1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainP1Actions set) { return set.Get(); }
        public void AddCallbacks(IMainP1Actions instance)
        {
            if (instance == null || m_Wrapper.m_MainP1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainP1ActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IMainP1Actions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IMainP1Actions instance)
        {
            if (m_Wrapper.m_MainP1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainP1Actions instance)
        {
            foreach (var item in m_Wrapper.m_MainP1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainP1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainP1Actions @mainP1 => new MainP1Actions(this);

    // mainP2
    private readonly InputActionMap m_mainP2;
    private List<IMainP2Actions> m_MainP2ActionsCallbackInterfaces = new List<IMainP2Actions>();
    private readonly InputAction m_mainP2_Shoot;
    private readonly InputAction m_mainP2_Move;
    private readonly InputAction m_mainP2_Jump;
    private readonly InputAction m_mainP2_Look;
    private readonly InputAction m_mainP2_P2Join;
    public struct MainP2Actions
    {
        private @PlayerActions m_Wrapper;
        public MainP2Actions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_mainP2_Shoot;
        public InputAction @Move => m_Wrapper.m_mainP2_Move;
        public InputAction @Jump => m_Wrapper.m_mainP2_Jump;
        public InputAction @Look => m_Wrapper.m_mainP2_Look;
        public InputAction @P2Join => m_Wrapper.m_mainP2_P2Join;
        public InputActionMap Get() { return m_Wrapper.m_mainP2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainP2Actions set) { return set.Get(); }
        public void AddCallbacks(IMainP2Actions instance)
        {
            if (instance == null || m_Wrapper.m_MainP2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainP2ActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @P2Join.started += instance.OnP2Join;
            @P2Join.performed += instance.OnP2Join;
            @P2Join.canceled += instance.OnP2Join;
        }

        private void UnregisterCallbacks(IMainP2Actions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @P2Join.started -= instance.OnP2Join;
            @P2Join.performed -= instance.OnP2Join;
            @P2Join.canceled -= instance.OnP2Join;
        }

        public void RemoveCallbacks(IMainP2Actions instance)
        {
            if (m_Wrapper.m_MainP2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainP2Actions instance)
        {
            foreach (var item in m_Wrapper.m_MainP2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainP2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainP2Actions @mainP2 => new MainP2Actions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard+Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IMainP1Actions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IMainP2Actions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnP2Join(InputAction.CallbackContext context);
    }
}
